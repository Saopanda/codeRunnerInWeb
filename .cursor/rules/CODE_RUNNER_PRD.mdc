---
description: 在线代码运行平台产品需求文档
alwaysApply: true
---

# 在线代码运行平台 PRD

## 背景与目标

### 背景
基于现有的 shadcn-admin 管理后台项目，开发一个纯前端实现的多语言在线代码运行平台。该平台将允许用户直接在浏览器中编写、运行和测试 JavaScript、TypeScript、PHP 和 Python 代码，无需依赖任何后端服务或第三方服务。

### 目标
- 提供安全、隔离的多语言代码运行环境
- 支持 JavaScript、TypeScript、PHP、Python 四种编程语言
- 集成到现有的 shadcn-admin 界面中，保持一致的UI/UX体验
- 支持实时代码编辑和即时执行
- 确保代码运行的安全性和稳定性

## 范围

### 功能范围
- 多语言代码编辑器（JavaScript、TypeScript、PHP、Python，支持语法高亮、自动补全）
- 多语言代码执行沙箱（Web Worker + iframe 双重隔离 + PHP-WASM + Python-WASM）
- 实时输出显示（控制台输出、错误信息）
- 代码示例和模板库（支持多种语言）
- 代码保存和加载功能
- 响应式设计，支持移动端
- 语言切换和配置管理

### 非功能范围
- 不提供代码版本控制
- 不提供协作编辑功能
- 不提供代码分享功能
- 不支持其他编程语言（仅限 JavaScript、TypeScript、PHP、Python）

## 用户画像与使用场景

### 主要用户
- **前端开发者**：快速测试 JavaScript、TypeScript 代码片段
- **后端开发者**：测试 PHP 代码片段和算法
- **数据科学家**：快速验证 Python 数据分析代码
- **学习者**：学习多种编程语言语法和概念
- **教学者**：演示多种语言的代码示例和概念

### 使用场景
1. **快速原型验证**：开发者需要快速验证某个功能或算法（支持多种语言）
2. **学习实验**：学习者尝试不同的编程语言语法和 API
3. **代码演示**：教学者展示多种语言的代码执行过程和结果
4. **问题调试**：开发者隔离和调试特定语言的代码问题
5. **跨语言对比**：比较不同编程语言的实现方式

## 用户故事与验收标准

### 用户故事 1：多语言代码编辑
**作为** 一个开发者  
**我希望** 能够在一个功能完整的代码编辑器中编写多种编程语言的代码  
**以便** 我可以快速编写和修改不同语言的代码

**验收标准：**
- Given 用户打开代码运行页面
- When 用户选择编程语言（JavaScript/TypeScript/PHP/Python）
- And 用户点击代码编辑区域
- Then 应该显示对应语言的语法高亮代码编辑器
- And 支持基本的编辑功能（复制、粘贴、撤销、重做）
- And 支持代码自动缩进和格式化
- And 支持语言特定的代码补全

### 用户故事 2：多语言代码执行
**作为** 一个开发者  
**我希望** 能够安全地执行我编写的多种编程语言代码  
**以便** 我可以看到代码的运行结果

**验收标准：**
- Given 用户在编辑器中编写了代码（JavaScript/TypeScript/PHP/Python）
- When 用户点击运行按钮
- Then 代码应该在对应语言的隔离沙箱环境中执行
- And 执行结果应该实时显示在输出区域
- And 如果代码有错误，应该显示清晰的错误信息
- And TypeScript 代码应该先编译再执行
- And PHP 代码应该通过 WebAssembly 运行时执行
- And Python 代码应该通过 Pyodide WebAssembly 运行时执行

### 用户故事 3：输出查看
**作为** 一个开发者  
**我希望** 能够清楚地看到代码的执行输出和错误信息  
**以便** 我可以调试和理解代码行为

**验收标准：**
- Given 代码正在执行
- When 代码产生输出（console.log、console.error等）
- Then 输出应该显示在专门的输出面板中
- And 不同类型的输出应该有视觉区分（普通输出、错误、警告）
- And 支持清空输出历史

### 用户故事 4：多语言代码模板
**作为** 一个学习者  
**我希望** 能够快速加载不同编程语言的常用代码模板  
**以便** 我可以快速开始学习或实验

**验收标准：**
- Given 用户打开代码运行页面
- When 用户选择编程语言并点击模板按钮
- Then 应该显示对应语言的可用代码模板列表
- And 用户可以选择模板并加载到编辑器中
- And 模板应该包含注释说明和语言特定的示例

## 非功能性需求

### 性能要求
- 代码执行响应时间 < 500ms
- 页面加载时间 < 2s
- 支持同时运行多个代码实例（最多3个）

### 安全要求
- 代码执行必须在完全隔离的沙箱环境中进行
- 防止恶意代码访问主页面或用户数据
- 限制代码执行时间和内存使用
- 禁止访问敏感浏览器 API

### 可用性要求
- 界面响应式设计，支持桌面和移动设备
- 与现有 shadcn-admin 界面风格保持一致
- 支持键盘快捷键操作
- 提供清晰的操作反馈

### 兼容性要求
- 支持现代浏览器（Chrome 90+, Firefox 88+, Safari 14+）
- 支持 ES6+ JavaScript 特性
- 支持 TypeScript 编译和执行
- 支持 PHP 8.1+ 语法和 WebAssembly 运行时
- 支持 Python 3.11+ 语法和 Pyodide WebAssembly 运行时
- 支持常用的 Web API（DOM、Fetch、Promise等）

## 风险与假设

### 技术风险
- **沙箱安全性**：Web Worker 和 iframe 的隔离可能不够彻底
- **性能影响**：大量代码执行可能影响页面性能
- **浏览器兼容性**：不同浏览器的沙箱实现可能有差异

### 业务风险
- **用户接受度**：功能复杂度可能影响用户体验
- **维护成本**：需要持续更新和维护沙箱安全机制

### 假设
- 用户主要使用现代浏览器
- 用户不需要执行复杂的异步操作
- 代码执行时间通常较短（< 10秒）
- PHP 代码主要在浏览器环境中运行，不需要文件系统访问
- WebAssembly 运行时支持满足 PHP 基本功能需求
- Python 代码主要在浏览器环境中运行，支持科学计算库（NumPy、Pandas等）
- Pyodide WebAssembly 运行时支持满足 Python 基本功能需求

## 里程碑与分期

### 第一期：基础功能（已完成）
- ✅ 集成 Monaco Editor 代码编辑器
- ✅ 实现简单的沙箱管理器（SimpleSandboxManager）
- ✅ 完成基本的代码执行和输出显示
- ✅ 支持 JavaScript、TypeScript 和 PHP 三种语言

### 第二期：安全增强（已完成）
- ✅ 实现多层安全防护（SecurityManager）
- ✅ 添加代码分析层（CodeAnalysisLayer）
- ✅ 实现运行时监控（RuntimeMonitoringLayer）
- ✅ 完善错误处理和异常捕获

### 第三期：多语言支持（已完成）
- ✅ 集成 PHP-WASM 运行时（PHPSandboxManager）
- ✅ 实现 TypeScript 编译器（TypeScriptCompiler）
- ✅ 添加语言切换功能
- ✅ 完善多语言代码模板和示例

### 第四期：测试优化（已完成）
- ✅ 完善测试覆盖（94% 通过率，160个测试用例）
- ✅ 性能监控和优化（PerformanceMonitor）
- ✅ 文档和用户指南
- ✅ 安全测试和验证

### 第五期：功能完善（已完成）
- ✅ 输出过滤和搜索功能
- ✅ 输出选择和批量操作
- ✅ 主题切换支持
- ✅ 响应式设计
- ✅ 错误边界和恢复机制

### 第六期：Python语言支持（已完成）
- ✅ 集成 Pyodide Python WebAssembly 运行时（v0.28.2）
- ✅ 实现 Python 沙箱管理器（PythonSandboxManager）
- ✅ 添加 Python 代码模板和示例
- ✅ 支持科学计算库（NumPy、Pandas、Matplotlib、SciPy、scikit-learn）
- ✅ 完善 Python 安全限制和资源管理
- ✅ 集成到主界面，支持语言切换

### 第七期：测试优化与文档完善（已完成）
- ✅ 完善测试覆盖（194个测试用例，100%通过率）
- ✅ 修复所有组件测试和服务测试问题
- ✅ 优化测试性能和稳定性
- ✅ 完善文档结构和内容一致性
- ✅ 清理过期和重复文档
- ✅ 统一项目文档标准
